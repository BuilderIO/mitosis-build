export declare const builder: (options?: import("./generators/builder").ToBuilderOptions) => ({ component }: import(".").TranspilerArgs) => import("@builder.io/sdk").BuilderContent;
export declare const targets: {
    readonly alpine: import(".").TranspilerGenerator<import("./generators/alpine").ToAlpineOptions>;
    readonly angular: import(".").TranspilerGenerator<import("./generators/angular").ToAngularOptions>;
    readonly customElement: import(".").TranspilerGenerator<import("./generators/html").ToHtmlOptions>;
    readonly html: import(".").TranspilerGenerator<import("./generators/html").ToHtmlOptions>;
    readonly mitosis: import(".").TranspilerGenerator<Partial<import("./generators/mitosis").ToMitosisOptions>>;
    readonly liquid: import(".").TranspilerGenerator<import("./generators/liquid").ToLiquidOptions>;
    readonly react: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly reactNative: import(".").TranspilerGenerator<Partial<import("./generators/react-native").ToReactNativeOptions>>;
    readonly solid: import(".").TranspilerGenerator<Partial<import("./generators/solid/types").ToSolidOptions>>;
    readonly svelte: import(".").TranspilerGenerator<import("./generators/svelte/types").ToSvelteOptions>;
    readonly swift: import(".").TranspilerGenerator<import(".").BaseTranspilerOptions>;
    readonly template: import(".").TranspilerGenerator<import("./generators/template").ToTemplateOptions>;
    readonly webcomponent: import(".").TranspilerGenerator<import("./generators/html").ToHtmlOptions>;
    readonly vue: import(".").TranspilerGenerator<Partial<import("./generators/vue").ToVueOptions>>;
    readonly stencil: import(".").TranspilerGenerator<import("./generators/stencil").ToStencilOptions>;
    readonly qwik: import(".").TranspilerGenerator<import("./generators/qwik/component-generator").ToQwikOptions>;
    readonly marko: import(".").TranspilerGenerator<import("./generators/marko").ToMarkoOptions>;
    readonly preact: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly lit: import(".").TranspilerGenerator<import("./generators/lit").ToLitOptions>;
    readonly rsc: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly taro: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
};
export type Targets = keyof typeof targets;
